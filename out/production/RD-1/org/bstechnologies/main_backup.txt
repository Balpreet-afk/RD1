package org.bstechnologies;

import org.bstechnologies.rd1.alg.FrmtAlg;
import org.bstechnologies.rd1.enc.Encrypter;
import org.bstechnologies.rd1.io.EncException;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Main {

    public static void main(String[] args) throws EncException, IOException, ParseException {
        String path = "src/org/bstechnologies/rd1/alg/alg.json";
        JSONParser parser = new JSONParser();
        Object obj = parser.parse(new FileReader(path));
        JSONObject json = (JSONObject) obj;
        JSONArray array = (JSONArray)json.get("PT");
        JSONObject json$ = (JSONObject)array.get(0);
        String test = (String)json$.get("SlL3");
        System.out.println(test);
        String str = (String)json.get("frmtd");
        if(str == null)
        {
            FrmtAlg frmt = new FrmtAlg(path);
            System.out.println("Alg File Formatted.... Restart the program");
            System.exit(0);
        }
//        String input="11100011001001100";
        System.out.println("Enter String");
        Scanner scan = new Scanner(System.in);
        String in = scan.nextLine();
        Encrypter enc = new Encrypter(path);
        String out = enc.encrypt(in);
        System.out.println(out);



//        System.out.println(bintoStr(input));
    }
    public static String toBinary(String input) {

        StringBuilder result = new StringBuilder();
        char[] chars = input.toCharArray();
        for (char aChar : chars) {
            result.append(
                    String.format("%8s", Integer.toBinaryString(aChar))   // char -> int, auto-cast
                            .replaceAll(" ", "0")                         // zero pads
            );
        }
        return orgBinary(result.toString(),8," ");

    }

    public static String orgBinary(String binary, int blockSize, String separator) {

        List<String> result = new ArrayList<>();
        int index = 0;
        while (index < binary.length()) {
            result.add(binary.substring(index, Math.min(index + blockSize, binary.length())));
            index += blockSize;
        }

        return result.stream().collect(Collectors.joining(separator));
    }
    public static String bintoStr(String input)
    {
        String raw = Arrays.stream(input.split(" "))
                .map(binary -> Integer.parseInt(binary, 2))
                .map(Character::toString)
                .collect(Collectors.joining());
        return raw;
    }
}
